## Method 1
class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        result= []
        self.generate(nums, 0,[], result)
        return result
      
    def generate(self,nums,starting,item,result):
        result.append(item[:])
        for i in range(len(nums)): 
            item.append(nums[i])
            if i >= starting:
                self.generate(nums,i+1,item,result)
            item.pop()

##
class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        # backtracking
        result= []
        self.helper(nums, 0, [], result)
        return result
        
    def helper(self, nums, index, cur, result):
        print(cur)
        result.append(cur)
        for i in range(index, len(nums)):
            self.helper(nums, i + 1, cur+[nums[i]], result)

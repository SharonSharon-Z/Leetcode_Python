# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        # corner case
        if not head:
            return False
        
        # circle, never end. So whenever it hits the end, no cycle
        low = head
        fast = head.next
        
        while low and fast and fast.next:
            if low == fast:
                return True
            else:
                low = low.next
                fast = fast.next.next    
        return False

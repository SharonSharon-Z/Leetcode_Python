###### LinkedList >> string >> number >> addition >> string >> LinkedList
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        cur = l1
        str1 = ''
        while cur:
            str1 += str(cur.val)
            cur = cur.next
        num1 = int(str1[::-1])
        
        cur = l2
        str2 = ''
        while cur:
            str2 += str(cur.val)
            cur = cur.next
        num2 = int(str2[::-1])
        
        string  = str(num1+num2)[::-1]
        
        root = ListNode(int(string[0]))
        cur = root
        for letter in string[1:]:
            cur.next = ListNode(int(letter))
            cur = cur.next   
        return root
        
######LinkedList / 2 pointer
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        
        
        root = ListNode((l1.val + l2.val) % 10)
        cur = root
        carry = 0
        if l1.val + l2.val >= 10:
            carry = 1
        
        p1 = l1.next
        p2 = l2.next
        
        while p1 or p2 or carry == 1:
            if p1 and p2:
                addup = p1.val + p2.val + carry
                cur.next = ListNode(addup % 10)
                p1 = p1.next
                p2 = p2.next
            elif p1:
                addup = p1.val + carry
                cur.next = ListNode(addup % 10)
                p1 = p1.next
            elif p2:
                addup = p2.val + carry
                cur.next = ListNode(addup % 10)
                p2 = p2.next
            elif carry:
                cur.next = ListNode(carry)
                return root
                    
            if addup >= 10:
                carry = 1
            else:
                carry = 0
            
            cur = cur.next
                
        return root
